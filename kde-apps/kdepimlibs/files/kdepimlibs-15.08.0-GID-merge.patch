From: Dan Vr√°til <dvratil@redhat.com>
Date: Mon, 07 Sep 2015 13:50:50 +0000
Subject: ItemSync: use RID merge by default, allow optional switch to GID merge
X-Git-Url: http://quickgit.kde.org/?p=kdepimlibs.git&a=commitdiff&h=43d5659a88a6ebb3423c6228986f0bd1e1f496f7
---
ItemSync: use RID merge by default, allow optional switch to GID merge

GID is not guaranteed to be actually unique and is not in our control, which means
that we can easilly run to the multiple merge candidates problem, which breaks
ItemSync. This patch switching ItemSync to use RID, which (although not enforced) is
basically guaranteed to be unique per Collection, thus the multiple merge candidates
error should not happen anymore.

Some resources however mandate GID-based merging (when RID is not stable), so we have
a new API that allows resources to switch the merging mode of ItemSync optionally.

(cherry picked from commit 442961918d8f3d9ff94fd4593c9b09d1e89d6bc0)
---


--- a/akonadi/autotests/itemsynctest.cpp
+++ b/akonadi/autotests/itemsynctest.cpp
@@ -451,14 +451,18 @@
         AKVERIFYEXEC(syncer);
 
         Item::List resultItems = fetchItems(col);
-        QCOMPARE(resultItems.count(), 2);
-
-        ItemFetchJob *fetchJob = new ItemFetchJob(modifiedItem);
+        QCOMPARE(resultItems.count(), 3);
+
+        Item item;
+        item.setGid(QStringLiteral("gid2"));
+        ItemFetchJob *fetchJob = new ItemFetchJob(item);
         fetchJob->fetchScope().fetchFullPayload();
         AKVERIFYEXEC(fetchJob);
-        QCOMPARE(fetchJob->items().size(), 1);
+        QCOMPARE(fetchJob->items().size(), 2);
         QCOMPARE(fetchJob->items().first().payload<QByteArray>(), QByteArray("payload2"));
         QCOMPARE(fetchJob->items().first().remoteId(), QString::fromLatin1("rid3"));
+        QCOMPARE(fetchJob->items().at(1).payload<QByteArray>(), QByteArray("payload1"));
+        QCOMPARE(fetchJob->items().at(1).remoteId(), QStringLiteral("rid2"));
     }
 
     /*

--- a/akonadi/src/agentbase/resourcebase.cpp
+++ b/akonadi/src/agentbase/resourcebase.cpp
@@ -76,6 +76,7 @@
         , mItemSyncer(0)
         , mItemSyncFetchScope(0)
         , mItemTransactionMode(ItemSync::SingleTransaction)
+        , mItemMergeMode(ItemSync::RIDMerge)
         , mCollectionSyncer(0)
         , mTagSyncer(0)
         , mRelationSyncer(0)
@@ -189,6 +190,7 @@
             mItemSyncer = new ItemSync(q->currentCollection());
             mItemSyncer->setTransactionMode(mItemTransactionMode);
             mItemSyncer->setBatchSize(mItemSyncBatchSize);
+            mItemSyncer->setMergeMode(mItemMergeMode);
             if (mItemSyncFetchScope) {
                 mItemSyncer->setFetchScope(*mItemSyncFetchScope);
             }
@@ -456,6 +458,7 @@
     ItemSync *mItemSyncer;
     ItemFetchScope *mItemSyncFetchScope;
     ItemSync::TransactionMode mItemTransactionMode;
+    ItemSync::MergeMode mItemMergeMode;
     CollectionSync *mCollectionSyncer;
     TagSync *mTagSyncer;
     RelationSync *mRelationSyncer;
@@ -1379,6 +1382,12 @@
     *(d->mItemSyncFetchScope) = fetchScope;
 }
 
+void ResourceBase::setItemMergingMode(ItemSync::MergeMode mode)
+{
+    Q_D(ResourceBase);
+    d->mItemMergeMode = mode;
+}
+
 void ResourceBase::setAutomaticProgressReporting(bool enabled)
 {
     Q_D(ResourceBase);

--- a/akonadi/src/agentbase/resourcebase.h
+++ b/akonadi/src/agentbase/resourcebase.h
@@ -545,6 +545,20 @@
      * @since 4.6
      */
     void setItemTransactionMode(ItemSync::TransactionMode mode);
+
+    /**
+     * Set merge mode for item sync'ing.
+     *
+     * Default merge mode is RIDMerge.
+     *
+     * @note This method must be called before first call to itemRetrieved(),
+     * itemsRetrieved() or itemsRetrievedIncremental().
+     *
+     * @param mode Item merging mode (see ItemCreateJob for details on item merging)
+     * @see Akonadi::ItemSync::MergeMode
+     * @ince 4.14.11
+     */
+    void setItemMergingMode(ItemSync::MergeMode mode);
 
     /**
      * Set the fetch scope applied for item synchronization.

--- a/akonadi/src/core/itemsync.cpp
+++ b/akonadi/src/core/itemsync.cpp
@@ -61,6 +61,7 @@
         , mProcessingBatch(false)
         , mDisableAutomaticDeliveryDone(false)
         , mBatchSize(10)
+        , mMergeMode(Akonadi::ItemSync::RIDMerge)
     {
         // we want to fetch all data by default
         mFetchScope.fetchFullPayload();
@@ -116,6 +117,7 @@
     bool mDisableAutomaticDeliveryDone;
 
     int mBatchSize;
+    Akonadi::ItemSync::MergeMode mMergeMode;
 };
 
 void ItemSyncPrivate::createOrMerge(const Item &item)
@@ -127,11 +129,13 @@
     }
     mPendingJobs++;
     ItemCreateJob *create = new ItemCreateJob(item, mSyncCollection, subjobParent());
-    if (!item.gid().isEmpty()) {
-        create->setMerge(ItemCreateJob::GID | ItemCreateJob::Silent);
-    } else {
-        create->setMerge(ItemCreateJob::RID | ItemCreateJob::Silent);
-    }
+    ItemCreateJob::MergeOptions merge = ItemCreateJob::Silent;
+    if (mMergeMode == ItemSync::RIDMerge) {
+        merge |= ItemCreateJob::RID;
+    } else if (mMergeMode == ItemSync::GIDMerge && !item.gid().isEmpty()) {
+        merge |= ItemCreateJob::GID;
+    }
+    create->setMerge(merge);
     q->connect(create, SIGNAL(result(KJob*)), q, SLOT(slotLocalChangeDone(KJob*)));
 }
 
@@ -535,5 +539,17 @@
     d->mBatchSize = size;
 }
 
+ItemSync::MergeMode ItemSync::mergeMode() const
+{
+    Q_D(const ItemSync);
+    return d->mMergeMode;
+}
+
+void ItemSync::setMergeMode(MergeMode mergeMode)
+{
+    Q_D(ItemSync);
+    d->mMergeMode = mergeMode;
+}
+
 #include "moc_itemsync.cpp"
 

--- a/akonadi/src/core/itemsync.h
+++ b/akonadi/src/core/itemsync.h
@@ -56,6 +56,12 @@
     Q_OBJECT
 
 public:
+    enum MergeMode
+    {
+        RIDMerge,
+        GIDMerge
+    };
+
     /**
      * Creates a new item synchronizer.
      *
@@ -208,6 +214,27 @@
      * @since 4.14
      */
     void setDisableAutomaticDeliveryDone(bool disable);
+
+    /**
+     * Returns current merge mode
+     *
+     * @see setMergeMode()
+     * @since 5.1
+     */
+    MergeMode mergeMode() const;
+
+    /**
+     * Set what merge method should be used for next ItemSync run
+     *
+     * By default ItemSync uses RIDMerge method.
+     *
+     * See ItemCreateJob for details on Item merging.
+     *
+     * @note You must call this method before starting the sync, changes afterwards lead to undefined results.
+     * @see mergeMode
+     * @since 4.14.11
+     */
+    void setMergeMode(MergeMode mergeMode);
 
 Q_SIGNALS:
     /**

